<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.apache.openejb</groupId>
  <artifactId>resource-injection</artifactId>
  <packaging>jar</packaging>
  <version>1.0</version>
  <name>OpenEJB :: Examples :: Resource Injection</name>
  <build>
    <defaultGoal>install</defaultGoal>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.5</source>
          <target>1.5</target>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <repositories>
    <repository>
      <id>codehaus-m2-snapshot</id>
      <name>Codehaus Snapshot Repository</name>
      <url>http://snapshots.repository.codehaus.org</url>
    </repository>
    <repository>
      <id>apache-m2-snapshot</id>
      <name>Apache Snapshot Repository</name>
      <url>http://people.apache.org/repo/m2-snapshot-repository/</url>
    </repository>
  </repositories>
  <dependencies>
    <dependency>
      <groupId>org.apache.geronimo.specs</groupId>
      <artifactId>geronimo-ejb_3.0_spec</artifactId>
      <version>1.0</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.geronimo.specs</groupId>
      <artifactId>geronimo-annotation_1.0_spec</artifactId>
      <version>1.0</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.1</version>
      <scope>test</scope>
    </dependency>

    <!--
    Nice thing about maven2 is it has test-only dependencies.
    This guarantees that non of your runtime code is dependent
    on any OpenEJB classes.

    For those of you who want to know the minimum steps required
    to add OpenEJB for testing to an existing maven 2 build, you
    simply add this dependency below and in your test code create
    your InitialContext like such:

        Properties properties = new Properties();
        properties.setProperty(Context.INITIAL_CONTEXT_FACTORY, "org.apache.openejb.client.LocalInitialContextFactory");

        initialContext = new InitialContext(properties);

    And include an add a src/main/resources/META-INF/ejb-jar.xml
    file to your project containing at least "<ejb-jar />"

    There is a method for finding your app without the need for
    an ejb-jar.xml via annotation scraping the classpath.  See:
    http://openejb.apache.org/loading-deployments-from-the-classpath.html
    -->
    <dependency>
      <groupId>org.apache.openejb</groupId>
      <artifactId>openejb-core</artifactId>
      <version>3.0-beta-1-SNAPSHOT</version>
      <scope>test</scope>
    </dependency>

  </dependencies>
</project>