#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# $Rev$ $Date$
#
#--------------------------------------------------------------------
# Validation Rule messages
#--------------------------------------------------------------------

# Format for the different levels follows this spirit:
#
# 1. Should be short and fixed such that someone could search/grep for it
#    without having to know/use regular expressions.  These tend to be similar
#    to the message key.
#
# 2. Intended to contain the issue expressed in 1 with only the essential
#    details, should not line wrap if possible.  Be terse.
#
# 3. Teacher's assistant.  A much more conversational and possibly more detailed
#    explanation of the issue, should tell the user what to do to fix the problem.
#    I.e. don't just point out what is wrong, also point out what is right.  Use
#    several lines if needed.
#


# 0 - Error Message
# 1 - Stack Trace
1.cannot.validate         Cannot validate jar
2.cannot.validate         Cannot validate jar: {0}
3.cannot.validate         Cannot validate jar: {0}

# 0 - Class name
# 1 - Element (home, ejb-class, remote)
# 2 - Bean name
1.missing.class           Missing class
2.missing.class           Missing class {0} 
3.missing.class           The class {0} not found. Check that the class specified in the {1} element for bean {2} is spelled correctly and the class is present in the jar

# 0 - Class name
# 1 - EJB Class name
1.wrong.class.type        Wrong class type
2.wrong.class.type        Wrong class type {0}
3.wrong.class.type        The class {0} is the wrong type, it does not extend {1}

# 0 - method name
# 1 - full method
# 2 - remote|home
# 3 - interface name
# 4 - EJB Class name
1.no.busines.method       No such business method
2.no.busines.method       Business method {0} not implemented.
3.no.busines.method       Business method {1} not implemented. The method was declared in the {2} interface {3}, but not implemented in the ejb class {4}

# 0 - home interface
# 1 - remote interface
1.no.home.create          No create method.  
2.no.home.create          No create method in {0}.
3.no.home.create          The home interface {0} must declare at least one create method. Example:\n\n\tpublic {1} create() throws javax.ejb.CreateException, java.rmi.RemoteException;

# 1 - EJB Class name
# 2 - create name
# 3 - create params
1.session.no.ejb.create     Create method not implemented.
2.session.no.ejb.create     Create method not implemented: {1}({2}).
3.session.no.ejb.create     There should be a create method in the bean class {0} with the following signature:\n\n\tpublic void {1}({2}) throws javax.ejb.CreateException

# 1 - EJB Class name
# 2 - create name
# 3 - primary key class
# 4 - create params
1.entity.no.ejb.create    Create method not implemented.
2.entity.no.ejb.create    Create method not implemented: {2}({3}).
3.entity.no.ejb.create    There should be a create method in the bean class {0} with the following signature:\n\n\tpublic {1} {2}({3}) throws javax.ejb.CreateException

# 1 - EJB Class name
# 2 - create name
# 3 - create params
1.no.ejb.post.create      No ejbPostCreate method
2.no.ejb.post.create      Missing create method: {1}({2})
3.no.ejb.post.create      Entity create method with no matching ejbPostCreate.  There should be an ejbPostCreate method in the bean class {0} with the following signature:\n\n\tpublic void {1}({2}) throws javax.ejb.CreateException

# 1 - bean class
# 2 - create params
# 3 - home interface
1.unused.ejb.create       Unused ejbCreate method
2.unused.ejb.create       Unused ejbCreate method: {2}({3})
3.unused.ejb.create       Create method will never be called.  The bean class {0} defines the create method {1}({3}), but there is no matching {2}({3}) method in the home interface {2}
                                                                                            

# 0 - Class name
# 1 - Element (home, ejb-class, remote)
# 2 - Bean name
# 3 - Dependent Class name
1.misslocated.class           Misslocated class
2.misslocated.class           Misslocated class {0} 
3.misslocated.class           The class {0} was found in a parent classloader and was loaded from there rather than this jar.  However, a dependent class {3} was not found in the parent classloader.  \n\nThere are two ways to fix this:\n\nOne, remove the class {0} from the jar in the parent classloader to ensure the class is only loaded from this jar.\n\nTwo, move the dependent class {3} and any other dependent classes into the jar in the parent classloader.

# 0 - Referring Class name
# 1 - Dependent Class name
# 2 - Element (home, ejb-class, remote)
# 3 - Bean name
1.missing.dependent.class           Missing dependent class or library
2.missing.dependent.class           Missing dependent class or library: {1} needed by {2}
3.missing.dependent.class           The class {1} not found and is referenced by the {2} class {0}.  The Check that the class or related library is available in the classpath


# CheckAssemblyBindings.java
# fail("InterceptorBinding", "interceptorBinding.noSuchEjbName", binding.getEjbName(), join(interceptorClasses, ","));
1.interceptorBinding.noSuchEjbName = Referenced EJB does not exist
2.interceptorBinding.noSuchEjbName = Referenced EJB does not exist: {0}
3.interceptorBinding.noSuchEjbName = Binding refers to an EJB, {0}, that does not exist.  Interceptors listed in binding: {1}

# fail("InterceptorBinding", "interceptorBinding.ejbNameRequiredWithMethod", binding.getMethod().getMethodName(), join(interceptorClasses, ","));
1.interceptorBinding.ejbNameRequiredWithMethod = ejb-name required with method binding
2.interceptorBinding.ejbNameRequiredWithMethod = ejb-name required with binding on method "{0}".
3.interceptorBinding.ejbNameRequiredWithMethod = Binding an interceptor to a specific method requires the ejb-name of the bean to also be specified.  Fix binding on method "{0}" for interceptors {1}.

# fail("MethodPermission", "methodPermission.ejbNameRequired", method.getMethodName(), join(permission.getRoleName(), ","));
1.methodPermission.ejbNameRequired =  ejb-name required for method-permission
2.methodPermission.ejbNameRequired =  ejb-name required for method-permission: {0}
3.methodPermission.ejbNameRequired =  Assinging a method-permission requires the ejb-name of the bean to also be specified.  Fix method-permission on method "{0}" for security roles {1}.

# fail("MethodPermission", "methodPermission.noSuchEjbName", method.getEjbName(), method.getMethodName(), join(permission.getRoleName(), ","));
1.methodPermission.noSuchEjbName = Referenced EJB does not exist
2.methodPermission.noSuchEjbName = Referenced EJB does not exist: {0} on method "{1}".
3.methodPermission.noSuchEjbName = Method-permission refers to an EJB, {0}, that does not exist.  Fix method-permission on method "{0}" for security roles {1}.

# fail("ContainerTransaction", "containerTransaction.ejbNameRequired", method.getMethodName(), transaction.getTransAttribute());
1.containerTransaction.ejbNameRequired = ejb-name required for container-transaction
2.containerTransaction.ejbNameRequired = ejb-name required for container-transaction: {0}
3.containerTransaction.ejbNameRequired = Assinging a container-transaction requires the ejb-name of the bean to also be specified.  Fix container-transaction on method "{0}" with transaction attribute {1}.

# fail("ContainerTransaction", "containerTransaction.noSuchEjbName", method.getMethodName(), method.getEjbName(), transaction.getTransAttribute());
1.containerTransaction.noSuchEjbName = Referenced EJB does not exist
2.containerTransaction.noSuchEjbName = Referenced EJB does not exist: {0} on method "{1}".
3.containerTransaction.noSuchEjbName = Container-transaction refers to an EJB, {0}, that does not exist.  Fix container-transaction on method "{0}" with transaction attribute {1}.

# CheckCallbacks.java
# fail(componentName, "aroundInvoke.badReturnType", aroundInvoke.getMethodName(), returnType.getName(), aroundInvoke.getClassName());
1.aroundInvoke.badReturnType = AroundInvoke method must return java.lang.Object
2.aroundInvoke.badReturnType = AroundInvoke method must return java.lang.Object: method "{0}" returns "{1}"
3.aroundInvoke.badReturnType = AroundInvoke method "{0}" in class {2} illegally returns {1} instead of java.lang.Object.  Change the method signature to "java.lang.Object {0}(javax.ejb.InvocationContext) throws java.lang.Exception"

# fail(componentName, "aroundInvoke.mustThrowException", aroundInvoke.getMethodName(), aroundInvoke.getClassName());
1.aroundInvoke.mustThrowException = AroundInvoke method must declare 'throws Exception'
2.aroundInvoke.mustThrowException = AroundInvoke method must declare 'throws Exception': method "{0}"
3.aroundInvoke.mustThrowException = AroundInvoke method "{0}" must declare java.lang.Exception in the throws clause.  Change the method signature to "java.lang.Object {0}(javax.ejb.InvocationContext) throws java.lang.Exception"

# fail(componentName, "aroundInvoke.missing", aroundInvoke.getMethodName(), aroundInvoke.getClassName());
1.aroundInvoke.missing = AroundInvoke method missing
2.aroundInvoke.missing = AroundInvoke method missing: "{0}" in class {1}
3.aroundInvoke.missing = AroundInvoke method "{0}" not found in class {1}.  The required method signature is "java.lang.Object {0}(javax.ejb.InvocationContext) throws java.lang.Exception"

# fail(componentName, "aroundInvoke.invalidArguments", aroundInvoke.getMethodName(), getParameters(possibleMethods.get(0)), aroundInvoke.getClassName());
1.aroundInvoke.invalidArguments = Invalid AroundInvoke arguments
2.aroundInvoke.invalidArguments = Invalid AroundInvoke arguments: {0}({1})
3.aroundInvoke.invalidArguments = AroundInvoke method signature "{0}({1})" in class {2} has invalid arguments.  The required method signature is "java.lang.Object {0}(javax.ejb.InvocationContext) throws java.lang.Exception"

# fail(componentName, "aroundInvoke.missing.possibleTypo", aroundInvoke.getMethodName(), possibleMethods.size(), aroundInvoke.getClassName());
1.aroundInvoke.missing.possibleTypo = AroundInvoke method missing or invalid
2.aroundInvoke.missing.possibleTypo = AroundInvoke method missing or invalid: looked for "{0}(javax.ejb.InvocationContext)" in class {2}
3.aroundInvoke.missing.possibleTypo = AroundInvoke method missing or invalid.  There are {1} methods with the name "{0}" visible in class {2}, none have the required signature of "java.lang.Object {0}(javax.ejb.InvocationContext) throws java.lang.Exception"

# fail(bean, "callback.badReturnType", type, callback.getMethodName(), returnType.getName(), callback.getClassName());
1.callback.badReturnType = {0} method must return 'void'
2.callback.badReturnType = {0} method must return 'void': method {1} returns {2}
3.callback.badReturnType = {0} method "{1}" in class {3} illegally returns {2} instead of void.  Change the method signature to "void {1}()"

# fail(bean, "callback.missing", type, callback.getMethodName(), callback.getClassName());
1.callback.missing = {0} method missing
2.callback.missing = {0} method missing: "{1}" in class {2}
3.callback.missing = {0} method "{1}" not found in class {2}.  The required method signature is "void {1}()"

# fail(bean, "callback.invalidArguments", type, callback.getMethodName(), getParameters(possibleMethods.get(0)), callback.getClassName());
1.callback.invalidArguments = Invalid {0} arguments
2.callback.invalidArguments = Invalid {0} arguments: {1}({2})
3.callback.invalidArguments = {0} method signature "{1}({2})" in class {3} has invalid arguments.  The required method signature is "void {1}()"

# fail(bean, "callback.missing.possibleTypo", type, callback.getMethodName(), possibleMethods.size(), callback.getClassName());
1.callback.missing.possibleTypo = {0} method missing or invalid
2.callback.missing.possibleTypo = {0} method missing or invalid: looked for "void {1}()" in class {3}
3.callback.missing.possibleTypo = {0} method missing or invalid.  There are {2} methods with the name "{1}" visible in class {3}, none have the required signature of "void {0}()"

# fail("Interceptor", "interceptor.callback.badReturnType", type, callback.getMethodName(), returnType.getName(), interceptorClass.getName());
1.interceptor.callback.badReturnType = {0} method must return "void"
2.interceptor.callback.badReturnType = {0} method must return "void": method {1} returns {2} in class {}
3.interceptor.callback.badReturnType = {0} method "{1}" in class {3} illegally returns {2} instead of void.  Change the method signature to "void {1}(javax.ejb.InvocationContext)"

# fail("Interceptor", "interceptor.callback.missing", type, callback.getMethodName(), interceptorClass.getName());
1.interceptor.callback.missing = {0} method missing
2.interceptor.callback.missing = {0} method missing: "{1}" in class {2}
3.interceptor.callback.missing = {0} method "{1}" not found in class {2}.  The required method signature is "void {1}(javax.ejb.InvocationContext)"

# fail("Interceptor", "interceptor.callback.invalidArguments", type, callback.getMethodName(), getParameters(possibleMethods.get(0)), interceptorClass.getName());
1.interceptor.callback.invalidArguments = Invalid {0} arguments
2.interceptor.callback.invalidArguments = Invalid {0} arguments: {1}({2}) in class {3}
3.interceptor.callback.invalidArguments = {0} method signature "{1}({2})" in class {3} has invalid arguments.  The required method signature is "void {1}(javax.ejb.InvocationContext)"

# fail("Interceptor", "interceptor.callback.missing.possibleTypo", type, callback.getMethodName(), possibleMethods.size(), interceptorClass.getName());
1.interceptor.callback.missing.possibleTypo = {0} method missing or invalid
2.interceptor.callback.missing.possibleTypo = {0} method missing or invalid: looked for "void {1}(javax.ejb.InvocationContext)" in class {3}
3.interceptor.callback.missing.possibleTypo = {0} method missing or invalid.  There are {2} methods with the name "{1}" visible in class {3}, none have the required signature of "void {0}()"

# CheckInjectionTargets.java
# warn(bean, "injectionTarget.nameContainsSet", target.getInjectionTargetName(), shortNameInvalid, shortNameCorrect, correctName, reference.getName(), reference.getClass().getSimpleName());
1.injectionTarget.nameContainsSet = Corrected invalid injection-target-name
2.injectionTarget.nameContainsSet = Corrected invalid injection-target-name: {0}
3.injectionTarget.nameContainsSet = The injection-target-name "{0}" for setter methods should not begin with "set".  The last portion of the name "{1}" has been automatically corrected to "{2}".  Update the descriptor with the correct injection-target-name of "{3}" to avoid receiving this warning.  Resource to be injected is "{4}".

# AnnotationDeployer.java
# fail(ejbName, "ann.remote.noAttributes", join(", ", interfaces));
1.ann.remote.noAttributes = Ambiguous @Remote() usage on bean class
2.ann.remote.noAttributes = Ambiguous @Remote() usage on bean class.  Must list interfaces explicitly in annotation.
3.ann.remote.noAttributes = When annotating a bean class as @Remote with no annotation attributes, the bean must implement exactly one business interface, no more and no less.  List the remote interfaces explicitly in the annotation, such as @Remote(\{{0}\}).  Alternatively, apply the @Remote annotation to the individual interfaces and remove it from the bean class.

# fail(ejbName, "ann.remoteLocal.ambiguous", join(", ", interfaces));
1.ann.remoteLocal.ambiguous = Ambiguous @Remote and @Local usage on bean class.
2.ann.remoteLocal.ambiguous = Ambiguous @Remote and @Local usage on bean class.  Must list interfaces explicitly in @Remote annotation.
3.ann.remoteLocal.ambiguous = When annotating a bean class as @Remote with no annotation attributes you must not also annotate it with @Local.  List the remote interfaces explicitly in the annotation, such as @Remote(\{{0}\}).  Alternatively, apply the @Remote annotation to the individual interfaces and remove it from the bean class.

# fail(ejbName, "ann.remoteLocal.conflict", join(", ", interfaces));
1.ann.remoteLocal.conflict = @Remote annotation in bean class conflicts with @Local in interface.
2.ann.remoteLocal.conflict = @Remote annotation in bean class conflicts with @Local in interface "{0}".
3.ann.remoteLocal.conflict = When annotating a bean class as @Remote, the corresponding business interfaces cannot be annotated with @Local.  Revise the business interface "{0}".

# fail(ejbName, "ann.local.noAttributes", join(", ", interfaces));
1.ann.local.noAttributes = Ambiguous @Local() usage on bean class
2.ann.local.noAttributes = Ambiguous @Local() usage on bean class.  Must list interfaces explicitly in annotation.
3.ann.local.noAttributes = When annotating a bean class as @Local with no annotation attributes, the bean must implement exactly one business interface, no more and no less.  List the local interfaces explicitly in the annotation, such as @Local(\{{0}\}).  Alternatively, apply the @Local annotation to the individual interfaces and remove it from the bean class.

# fail(ejbName, "ann.localRemote.ambiguous", join(", ", interfaces));
1.ann.localRemote.ambiguous = Ambiguous @Local and @Remote usage on bean class.
2.ann.localRemote.ambiguous = Ambiguous @Local and @Remote usage on bean class.  Must list interfaces explicitly in @Local annotation.
3.ann.localRemote.ambiguous = When annotating a bean class as @Local with no annotation attributes you must not also annotate it with @Remote.  List the local interfaces explicitly in the annotation, such as @Local(\{{0}\}).  Alternatively, apply the @Local annotation to the individual interfaces and remove it from the bean class.

# fail(ejbName, "ann.localRemote.conflict", join(", ", interfaces));
1.ann.localRemote.conflict = @Local annotation in bean class conflicts with @Remote in interface.
2.ann.localRemote.conflict = @Local annotation in bean class conflicts with @Remote in interface "{0}".
3.ann.localRemote.conflict = When annotating a bean class as @Local, the corresponding business interfaces cannot be annotated with @Remote.  Revise the business interface "{0}".

# fail(ejbName, "ann.remoteOrLocal.ejbHome", annotationName, interfce.getName());
1.ann.remoteOrLocal.ejbHome = @{0} used in bean class lists a javax.ejb.EJBHome interface.
2.ann.remoteOrLocal.ejbHome = @{0} used in bean class lists a javax.ejb.EJBHome interface. Use @RemoteHome({1})
3.ann.remoteOrLocal.ejbHome = When applied to a bean class, the @{0} annotation must only list business interfaces and cannot list legacy EJBHome interfaces.  EJBHome interfaces can be annotated on the bean class with @RemoteHome({1})

# fail(ejbName, "ann.remoteOrLocal.ejbLocalHome", annotationName, interfce.getName());
1.ann.remoteOrLocal.ejbLocalHome = @{0} used in bean class lists a javax.ejb.EJBLocalHome interface.
2.ann.remoteOrLocal.ejbLocalHome = @{0} used in bean class lists a javax.ejb.EJBLocalHome interface. Use @LocalHome({1})
3.ann.remoteOrLocal.ejbLocalHome = When applied to a bean class, the @{0} annotation must only list business interfaces and cannot list legacy EJBLocalHome interfaces.  EJBLocalHome interfaces can be annotated on the bean class with @LocalHome({1})

# fail(ejbName, "ann.remoteOrLocal.ejbObject", annotationName, interfce.getName());
1.ann.remoteOrLocal.ejbObject = @{0} used in bean class lists a javax.ejb.EJBObject interface.
2.ann.remoteOrLocal.ejbObject = @{0} used in bean class lists a javax.ejb.EJBObject interface. Use @RemoteHome with home interface of "{1}".
3.ann.remoteOrLocal.ejbObject = When applied to a bean class, the @{0} annotation must only list business interfaces and cannot list legacy EJBObject interfaces.  The EJBHome of interface for "{1}" can be annotated on the bean class with @RemoteHome

# fail(ejbName, "ann.remoteOrLocal.ejbLocalObject", annotationName, interfce.getName());
1.ann.remoteOrLocal.ejbLocalObject = @{0} used in bean class lists a javax.ejb.EJBLocalObject interface.
2.ann.remoteOrLocal.ejbLocalObject = @{0} used in bean class lists a javax.ejb.EJBLocalObject interface. Use @LocalHome with home interface of "{1}".
3.ann.remoteOrLocal.ejbLocalObject = When applied to a bean class, the @{0} annotation must only list business interfaces and cannot list legacy EJBLocalObject interfaces.  The EJBLocalHome of interface for "{1}" can be annotated on the bean class with @LocalHome

# fail(ejbName, "xml.remoteOrLocal.ejbHome", tagName, interfce.getName());
1.xml.remoteOrLocal.ejbHome = javax.ejb.EJBHome interface declared as {0}.
2.xml.remoteOrLocal.ejbHome = javax.ejb.EJBHome interface declared as {0}. Use <home>{1}</home>
3.xml.remoteOrLocal.ejbHome = Interfaces extending javax.ejb.EJBHome pre-date the concept of EJB 3.0 simplified business interfaces and must not use the {0} tag when declared in the ejb-jar.xml.  Declare this interface as <home>{1}</home>.

# fail(ejbName, "xml.remoteOrLocal.ejbLocalHome", tagName, interfce.getName());
1.xml.remoteOrLocal.ejbLocalHome = javax.ejb.EJBHome interface declared as {0}.
2.xml.remoteOrLocal.ejbLocalHome = javax.ejb.EJBHome interface declared as {0}. Use <local-home>{1}</local-home>
3.xml.remoteOrLocal.ejbLocalHome = Interfaces extending javax.ejb.EJBLocalHome pre-date the concept of EJB 3.0 simplified business interfaces and must not use the {0} tag when declared in the ejb-jar.xml.  Declare this interface as <local-home>{1}</local-home>.

# fail(ejbName, "xml.remoteOrLocal.ejbObject", tagName, interfce.getName());
1.xml.remoteOrLocal.ejbObject = javax.ejb.EJBHome interface declared as {0}.
2.xml.remoteOrLocal.ejbObject = javax.ejb.EJBHome interface declared as {0}. Use <remote>{1}</remote>
3.xml.remoteOrLocal.ejbObject = Interfaces extending javax.ejb.EJBObject pre-date the concept of EJB 3.0 simplified business interfaces and must not use the {0} tag when declared in the ejb-jar.xml.  Declare this interface as <remote>{1}</remote>.

# fail(ejbName, "xml.remoteOrLocal.ejbLocalObject", tagName, interfce.getName());
1.xml.remoteOrLocal.ejbLocalObject = javax.ejb.EJBHome interface declared as {0}.
2.xml.remoteOrLocal.ejbLocalObject = javax.ejb.EJBHome interface declared as {0}. Use <local>{1}</local>
3.xml.remoteOrLocal.ejbLocalObject = Interfaces extending javax.ejb.EJBObject pre-date the concept of EJB 3.0 simplified business interfaces and must not use the {0} tag when declared in the ejb-jar.xml.  Declare this interface as <local>{1}</local>.

# fail(bean, "persistenceContextExtented.nonStateful", refName, beanType);
1.persistenceContextExtented.nonStateful = Non-Stateful use of PersistenceContextType.EXTENDED
2.persistenceContextExtented.nonStateful = Non-Stateful use of PersistenceContextType.EXTENDED in ref {0}
3.persistenceContextExtented.nonStateful = {1} ejbs are not capable of using EntityManagers with EXTENTED persistence.  Convert your bean to a Stateful ejb or update the "{0}" PersistenceContext reference to PersistenceContextType.TRANSACTION.

# fail(consumer.getJndiConsumerName(), "resourceRef.onEntityManager", refName);
1.resourceRef.onEntityManager = Mistaken use of @Resource on an EntityManager reference.  Use @PersistenceContext.
2.resourceRef.onEntityManager = Mistaken use of @Resource on an EntityManager reference.  Use @PersistenceContext for ref "{0}"
3.resourceRef.onEntityManager = The @Resource annotation cannot be used on references to javax.persistence.EntityManager.  Change the annotation to @PersistenceContext for ref "{0}"

# fail(consumer.getJndiConsumerName(), "resourceRef.onEntityManagerFactory", refName);
1.resourceRef.onEntityManagerFactory = Mistaken use of @Resource on an EntityManagerFactory reference.  Use @PersistenceUnit.
2.resourceRef.onEntityManagerFactory = Mistaken use of @Resource on an EntityManagerFactory reference.  Use @PersistenceUnit for ref "{0}"
3.resourceRef.onEntityManagerFactory = The @Resource annotation cannot be used on references to javax.persistence.EntityManagerFactory.  Change the annotation to @PersistenceUnit for ref "{0}"

# fail(consumer.getJndiConsumerName(), "ejbAnnotation.onClassWithNoBeanInterface");
1.ejbAnnotation.onClassWithNoBeanInterface = Missing required "beanInterface" attribute on class-level @EJB usage
2.ejbAnnotation.onClassWithNoBeanInterface = Missing required "beanInterface" attribute on class-level @EJB usage
3.ejbAnnotation.onClassWithNoBeanInterface = The "beanInterface" attribute was not specified for the class level annotation @EJB. It is mandatory for all class level @EJB annotations.

# fail(consumer.getJndiConsumerName(), "ejbAnnotation.onClassWithNoName");
1.ejbAnnotation.onClassWithNoName = Missing required "name" attribute on class-level @EJB usage
2.ejbAnnotation.onClassWithNoName = Missing required "name" attribute on class-level @EJB usage
3.ejbAnnotation.onClassWithNoName = The "name" attribute was not specified for the class level annotation @EJB. It is mandatory for all class level @EJB annotations.

# fail(consumer.getJndiConsumerName(), "presistenceContextAnnotation.onEntityManagerFactory", persistenceContextRef.getName());
1.presistenceContextAnnotation.onEntityManagerFactory = Mistaken use of @PersistenceContext on an EntityManagerFactory reference.  Use @PersistenceUnit.
2.presistenceContextAnnotation.onEntityManagerFactory = Mistaken use of @PersistenceContext on an EntityManagerFactory reference.  Use @PersistenceUnit for ref "{0}"
3.presistenceContextAnnotation.onEntityManagerFactory =  The @PersistenceContext annotation only applies to javax.persistence.EntityManager and cannot be used on references to javax.persistence.EntityManagerFactory.  Change the annotation to @PersistenceUnit for ref "{0}"

# fail(consumer.getJndiConsumerName(), "presistenceContextAnnotation.onNonEntityManager", persistenceContextRef.getName());
1.presistenceContextAnnotation.onNonEntityManager = Use of @PersistenceContext only applies to EntityManager references
2.presistenceContextAnnotation.onNonEntityManager = Use of @PersistenceContext only applies to EntityManager references.  Fix ref "{0}"
3.presistenceContextAnnotation.onNonEntityManager = The @PersistenceContext annotation only applies to javax.persistence.EntityManager and cannot be used on references of other types.  Change the annotation for ref "{0}"

# fail(consumer.getJndiConsumerName(), "presistenceUnitAnnotation.onEntityManager", persistenceUnitRef.getName());
1.presistenceUnitAnnotation.onEntityManager = Mistaken use of @PersistenceUnit on an EntityManager reference.  Use @PersistenceContext
2.presistenceUnitAnnotation.onEntityManager = Mistaken use of @PersistenceUnit on an EntityManager reference.  Use @PersistenceContext for ref "{0}"
3.presistenceUnitAnnotation.onEntityManager = The @PersistenceUnit annotation only applies to javax.persistence.EntityManagerFactory and cannot be used on references to javax.persistence.EntityManager.  Change the annotation to @PersistenceContext for ref "{0}"

# fail(consumer.getJndiConsumerName(), "presistenceUnitAnnotation.onNonEntityManagerFactory", persistenceUnitRef.getName());
1.presistenceUnitAnnotation.onNonEntityManagerFactory = Use of @PersistenceUnit only applies to EntityManager references
2.presistenceUnitAnnotation.onNonEntityManagerFactory = Use of @PersistenceUnit only applies to EntityManager references.  Fix ref "{0}"
3.presistenceUnitAnnotation.onNonEntityManagerFactory = The @PersistenceUnit annotation only applies to javax.persistence.EntityManagerFactory and cannot be used on references of other types.  Change the annotation for ref "{0}"

# fail(consumer.getJndiConsumerName(), "resourceAnnotation.onClassWithNoName");
1.resourceAnnotation.onClassWithNoName = Missing required "name" attribute on class-level @Resource usage
2.resourceAnnotation.onClassWithNoName = Missing required "name" attribute on class-level @Resource usage
3.resourceAnnotation.onClassWithNoName = The "name" attribute was not specified for the class level annotation @Resource. It is mandatory for all class level @Resource annotations.

# fail(consumer.getJndiConsumerName(), "resourceAnnotation.onClassWithNoType");
1.resourceAnnotation.onClassWithNoType = Missing required "type" attribute on class-level @Resource usage
2.resourceAnnotation.onClassWithNoType = Missing required "type" attribute on class-level @Resource usage
3.resourceAnnotation.onClassWithNoType = The "type" attribute was not specified for the class level annotation @Resource. It is mandatory for all class level @Resource annotations.

# fail(consumer.getJndiConsumerName(), "presistenceContextAnnotation.onClassWithNoName", persistenceContext.unitName());
1.presistenceContextAnnotation.onClassWithNoName = Missing required "name" attribute on class-level @PersistenceContext usage
2.presistenceContextAnnotation.onClassWithNoName = Missing required "name" attribute on class-level @PersistenceContext usage.
3.presistenceContextAnnotation.onClassWithNoName = The "name" attribute was not specified for the class level annotation @PersistenceContext with unitName="{0}". It is mandatory for all class level @PersistenceContext annotations.

# fail(consumer.getJndiConsumerName(), "presistenceUnitAnnotation.onClassWithNoName", persistenceUnit.unitName());
1.presistenceUnitAnnotation.onClassWithNoName = Missing required "name" attribute on class-level @PersistenceUnit usage
2.presistenceUnitAnnotation.onClassWithNoName = Missing required "name" attribute on class-level @PersistenceUnit usage.
3.presistenceUnitAnnotation.onClassWithNoName = The "name" attribute was not specified for the class level annotation @PersistenceUnit with unitName="{0}". It is mandatory for all class level @PersistenceUnit annotations.


# AutoConfig.java
# fail(componentName, "persistenceContextRef.noPersistenceUnits", refShortName, unitName);
1.persistenceContextRef.noPersistenceUnits = Missing required persistence.xml for @PersistenceContext ref
2.persistenceContextRef.noPersistenceUnits = Missing required persistence.xml for @PersistenceContext ref "{0}" to unit "{1}"
3.persistenceContextRef.noPersistenceUnits = A persistence unit must be defined via META-INF/persistence.xml to satisfy @PersistenceContext ref "{0}" to unit "{1}".  An example of a suitable persistence.xml might be:\
  <persistence xmlns="http://java.sun.com/xml/ns/persistence" version="1.0">\
    <persistence-unit name="{1}">\
      <jta-data-source>java:openejb/Resource/myDataSource</jta-data-source>\
      <non-jta-data-source>java:openejb/Resource/myUnmanagedDataSource</non-jta-data-source>\
\
        <properties>\
        <property name="openjpa.jdbc.SynchronizeMappings" value="buildSchema(ForeignKeys=true)"/>\
      </properties>\
    </persistence-unit>\
  </persistence>\


# fail(componentName, "persistenceContextRef.noUnitName", refShortName, join(", ", availableUnits), sampleUnitName );
1.persistenceContextRef.noUnitName = @PersistenceContext unitName required, multiple units available.
2.persistenceContextRef.noUnitName = @PersistenceContext unitName required, multiple units available: ref "{0}", available units [{1}]
3.persistenceContextRef.noUnitName = Use of @PersistenceContext witout a unitName is only allowed when there is only a single persistence.xml in the entire application defining exactly one persistence-unit.  Available units for ref {0} are [{1}].  Add the unitName to your declaration, for example:\
    @PersistenceContext(name="{0}", unitName = "{2}")

# fail(componentName, "persistenceContextRef.vagueMatches", refShortName, unitName, possibleUnits.size(), join(", ", possibleUnits));
1.persistenceContextRef.vagueMatches = @PersistenceContext unitName has multiple matches.
2.persistenceContextRef.vagueMatches = @PersistenceContext unitName has multiple matches: unitName "{1}" has {2} possible matches.
3.persistenceContextRef.vagueMatches = The reference @PersistenceContext(name="{0}", unitName="{1}") cannot be resolved as there are {2} units with the same name.  Update your unitName to one of the following:\
{3}

# fail(componentName, "persistenceContextRef.noMatches", refShortName, unitName, join(", ", availableUnits));
1.persistenceContextRef.noMatches = Persistence unit not found
2.persistenceContextRef.noMatches = Persistence unit not found for @PersistenceContext(name="{0}", unitName="{1}").  Available units [{2}]
3.persistenceContextRef.noMatches = The persistence unit "{1}" does not exist.  Update the "{0}" PersistenceContext ref to one of the available units [{2}] or declare the unit in a persistence.xml like the following:\
  <persistence xmlns="http://java.sun.com/xml/ns/persistence" version="1.0">\
    <persistence-unit name="{1}">\
      <jta-data-source>java:openejb/Resource/myDataSource</jta-data-source>\
      <non-jta-data-source>java:openejb/Resource/myUnmanagedDataSource</non-jta-data-source>\
\
        <properties>\
        <property name="openjpa.jdbc.SynchronizeMappings" value="buildSchema(ForeignKeys=true)"/>\
      </properties>\
    </persistence-unit>\
  </persistence>\


# fail(componentName, "persistenceUnitRef.noPersistenceUnits", refShortName, unitName);
1.persistenceUnitRef.noPersistenceUnits = Missing required persistence.xml for @PersistenceUnit ref
2.persistenceUnitRef.noPersistenceUnits = Missing required persistence.xml for @PersistenceUnit ref "{0}" to unit "{1}"
3.persistenceUnitRef.noPersistenceUnits = A persistence unit must be defined via META-INF/persistence.xml to satisfy @PersistenceUnit ref "{0}" to unit "{1}".  An example of a suitable persistence.xml might be:\
  <persistence xmlns="http://java.sun.com/xml/ns/persistence" version="1.0">\
    <persistence-unit name="{1}">\
      <jta-data-source>java:openejb/Resource/myDataSource</jta-data-source>\
      <non-jta-data-source>java:openejb/Resource/myUnmanagedDataSource</non-jta-data-source>\
\
        <properties>\
        <property name="openjpa.jdbc.SynchronizeMappings" value="buildSchema(ForeignKeys=true)"/>\
      </properties>\
    </persistence-unit>\
  </persistence>\


# fail(componentName, "persistenceUnitRef.noUnitName", refShortName, join(", ", availableUnits), sampleUnitName );
1.persistenceUnitRef.noUnitName = @PersistenceUnit unitName required, multiple units available.
2.persistenceUnitRef.noUnitName = @PersistenceUnit unitName required, multiple units available: ref "{0}", available units [{1}]
3.persistenceUnitRef.noUnitName = Use of @PersistenceUnit witout a unitName is only allowed when there is only a single persistence.xml in the entire application defining exactly one persistence-unit.  Available units for ref {0} are [{1}].  Add the unitName to your declaration, for example:\
    @PersistenceUnit(name="{0}", unitName = "{2}")

# fail(componentName, "persistenceUnitRef.vagueMatches", refShortName, unitName, possibleUnits.size(), join(", ", possibleUnits));
1.persistenceUnitRef.vagueMatches = @PersistenceUnit unitName has multiple matches.
2.persistenceUnitRef.vagueMatches = @PersistenceUnit unitName has multiple matches: unitName "{1}" has {2} possible matches.
3.persistenceUnitRef.vagueMatches = The reference @PersistenceUnit(name="{0}", unitName="{1}") cannot be resolved as there are {2} units with the same name.  Update your unitName to one of the following:\
{3}

# fail(componentName, "persistenceUnitRef.noMatches", refShortName, unitName, join(", ", availableUnits));
1.persistenceUnitRef.noMatches = Persistence unit not found
2.persistenceUnitRef.noMatches = Persistence unit not found for ref @PersistenceUnit(name="{0}", unitName="{1}").  Available units [{2}]
3.persistenceUnitRef.noMatches = The persistence unit "{1}" does not exist.  Update the "{0}" PersistenceUnit ref to one of the available units [{2}] or declare the unit in a persistence.xml like the following:\
  <persistence xmlns="http://java.sun.com/xml/ns/persistence" version="1.0">\
    <persistence-unit name="{1}">\
      <jta-data-source>java:openejb/Resource/myDataSource</jta-data-source>\
      <non-jta-data-source>java:openejb/Resource/myUnmanagedDataSource</non-jta-data-source>\
\
        <properties>\
        <property name="openjpa.jdbc.SynchronizeMappings" value="buildSchema(ForeignKeys=true)"/>\
      </properties>\
    </persistence-unit>\
  </persistence>\


# fail(ejbName, "interfaceAnnotatedAsBean", annotationClass.getSimpleName(), beanClass.getName());
1.interfaceAnnotatedAsBean = @{0} cannot be applied to an interface.
2.interfaceAnnotatedAsBean = @{0} cannot be applied to an interface: {1}
3.interfaceAnnotatedAsBean = Only concrete classes, not interfaces, are allowed to use the @{0} annotation.  Either convert the interface {1} to a class so that it may be used as a valid bean or move the @{0} annotation to the classes that implement this interface.

# fail(ejbName, "abstractAnnotatedAsBean", annotationClass.getSimpleName(), beanClass.getName());
1.abstractAnnotatedAsBean = @{0} cannot be applied to abstract classes.
2.abstractAnnotatedAsBean = @{0} cannot be applied to an abstract class: {1}
3.abstractAnnotatedAsBean = Only concrete classes, not abstract classes, are allowed to use the @{0} annotation.  Either convert the abstract class {1} to a concrete class so that it may be used as a valid bean or move the @{0} annotation to the classes that subclass from this class.

# fail(ejbName, "multiplyAnnotatedAsBean", annotationClass.getSimpleName(), secondAnnotation.getSimpleName(), ejbName, beanClass.getName())
1.multiplyAnnotatedAsBean = Identical 'name' used in both @{0} and @{1} annotations.
2.multiplyAnnotatedAsBean = Identical 'name' used in both @{0} and @{1} annotations: name={2}
3.multiplyAnnotatedAsBean = When attempting to deploy a bean as both @{0} and @{1} different values must be used for the 'name' attributes as all ejb-names must be unique within a given ejb-jar.  Update the @{1} annotation to explicitly set the 'name' attribute to a different value.  For example: @{1}(name = "{1}{2}")

# fail(b, "noInterfaceDeclared.entity", ejbClass.getSimpleName());
1.noInterfaceDeclared.entity = EJBHome or EJBLocalHome interface required.
2.noInterfaceDeclared.entity = EJBHome or EJBLocalHome interface required.
3.noInterfaceDeclared.entity = EJB 2.x and 1.x entity beans require EJBHome or EJBLocalHome interfaces to be accessed.  An example of valid component (i.e. pre-EJB 3.0) interfaces for this bean might be:\
    public interface {0}Home extends javax.ejb.EJBLocalHome '\u007B' \
        {0}Object create() throws javax.ejb.CreateException;        \
    '\u007D' \
\
    public interface {0}Object extends javax.ejb.EJBLocalObject '\u007B' \
        \
    '\u007D' \


# fail(b, "noInterfaceDeclared.session", ejbClass.getSimpleName());
1.noInterfaceDeclared.session = Business Interface or @WebService annotation required.
2.noInterfaceDeclared.session = Business Interface or @WebService annotation required.
3.noInterfaceDeclared.session = All EJB 3.0 and earlier Session beans must either implement an interface, declare one via annotation or xml, or be annotated with @javax.jws.WebService.  An example interface for this bean might be:\
    @Local\
    public interface {0}Local '\u007B' \
        // add the methods from {0} you'd like to expose  \
    '\u007D' \
\
Which can then be implemented by the {0} class.\


# fail(b, "notAnInterface", interfce.getName(), tagName);
1.notAnInterface = Business remotes and locals must be interfaces.
2.notAnInterface = Class tagged as {1} is not an interface: {0}
3.notAnInterface = All business remote and business local views must be java interfaces.  Classes, abstract classes or enums are not allowed.  Either convert {0} to an interface or remove the related {1} xml tag from your ejb-jar.xml.

# fail(ejbName, "ann.notAnInterface", annotationName, interfce.getName());
1.ann.notAnInterface = @{0} lists a non-interface.
2.ann.notAnInterface = @{0} lists a non-interface: {1}
3.ann.notAnInterface = All business remote and business local views must be java interfaces.  Classes, abstract classes or enums are not allowed.  Either convert {1} to an interface or remove it from the @{0} list in the bean class.

# warn(b, "interface.beanOnlyAnnotation", annotation.getSimpleName(), interfce.getName(), b.getEjbClass());
1.interface.beanOnlyAnnotation = Ignoring @{0}.  Annotation only usable on the bean class.
2.interface.beanOnlyAnnotation = Ignoring @{0} used on interface {1}.  Annotation only usable on the bean class.
3.interface.beanOnlyAnnotation = @{0} is only usable on the bean classes, not its interfaces.  This annotation will be ignored unless it is moved to the bean class {2}.

# warn(b, "interfaceMethod.beanOnlyAnnotation", annotation.getSimpleName(), interfce.getName(), method.getName(), b.getEjbClass());
1.interfaceMethod.beanOnlyAnnotation = Ignoring @{0}.  Annotation only usable on the bean class.
2.interfaceMethod.beanOnlyAnnotation = Ignoring @{0} used on interface {1} method {2}.  Annotation only usable on the bean class.
3.interfaceMethod.beanOnlyAnnotation = @{0} is only usable on the bean classes, not its interfaces.  This annotation will be ignored unless it is moved to the {2} method in the bean class {3}.
